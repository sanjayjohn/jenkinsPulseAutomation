{"events":[{"eventName":"SlackEvent","_id":"event-1"},{"eventName":"UpdateQTestWithFormattedResultsEvent","_id":"event-2"},{"eventName":"jenkinsConsoleOutput","_id":"event-3"},{"eventName":"TriggerJenkins","_id":"event-4"},{"eventName":"parsetestngresults","_id":"event-5"}],"actions":[{"name":"SlackAction","description":null,"pFunction":"var str = body;\n\nvar request = require('request');\nvar slack_webhook = constants.SlackWebHook;\n\nconsole.log('About to request slack webhook: ', slack_webhook);\n\nrequest({uri: slack_webhook,\n         method: 'POST',\n         json: {\"text\": JSON.stringify(str)}\n     }, function(error, response, body) { }\n);","_id":"action-1"},{"name":"uploadResultToQtest","description":null,"pFunction":"var payload = body;\r\nvar timestamp = new Date();\r\n\r\nvar testLogs = payload.logs;\r\nvar cycleId = payload[\"test-cycle\"];\r\nvar projectId = payload.projectId;\r\n\r\n\r\nvar standardHeaders = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': constants.qTestAPIToken\r\n}\r\n\r\nvar createLogsAndTCs = function() {\r\n    var opts = {\r\n        url: \"https://\" + constants.ManagerURL + \"/api/v3/projects/\" + projectId + \"/auto-test-logs?type=automation\",\r\n        json: true,\r\n        headers: standardHeaders,\r\n        body: {\r\n            skipCreatingAutomationModule: true,\r\n            execution_date: timestamp.toISOString(),\r\n            test_cycle: cycleId,\r\n            test_logs: testLogs\r\n        }\r\n    };\r\n\r\n    request.post(opts, function(err, response, resbody) {\r\n\r\n        if(err) {\r\n            Promise.reject(err); \r\n            emitEvent('SlackEvent', { AutomationLogUploaded: err });\r\n\r\n        }\r\n        else {\r\n            emitEvent('SlackEvent', { AutomationLogUploaded: resbody });\r\n            \r\n            if(response.body.type == \"AUTOMATION_TEST_LOG\") {\r\n                Promise.resolve(\"Uploaded results successfully\");\r\n            }\r\n            else {\r\n                emitEvent('SlackEvent', { Error: \"Unable to upload results\"});\r\n                Promise.reject(\"Unable to upload test results\");\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\ncreateLogsAndTCs();","_id":"action-2"},{"name":"jenkinsConsoleOutput","description":"API call to get the Jenkins Console Output. \nNote: Need to send a curl post request with project Id, test cycle Id, Jenkins Job Name, and XML results as shown in the initializing variables in lines 3-6.","pFunction":"payload = body;\r\n\r\nprojectId = body.projectID;\r\ncycleId = body.testcycle;\r\njobName = body.jobName;\r\ntestResults = body.result;\r\n\r\nvar url = \"http://\" + constants.JenkinsUserName + \":\" + constants.JenkinsAPIToken + \"@\" + constants.JenkinsURL + '/job/' + jobName + '/lastBuild/consoleText'\r\nattachments = []\r\n\r\nrequest.get({url:url, insecure: true}, function(err, response, bd) {\r\n    if(!err) {\r\n        attachments.push({\r\n            name: 'consoleoutput.txt',\r\n            data: Buffer.from(bd).toString(\"base64\"),\r\n            content_type: \"text/plain\"\r\n        });\r\n        emitEvent('SlackEvent', { JenkinsConsoleOutput: \"Acquired Console Output from build\" });\r\n        var formattedResults = {\r\n            \"projectId\" : projectId,\r\n            \"test-cycle\" : cycleId,\r\n            \"logs\" : testResults,\r\n            \"consoleOutput\": attachments\r\n        };\r\n        emitEvent('SlackEvent', { ResultsFormatSuccess: \"Results formatted successfully for project\" }); \r\n        emitEvent('parsetestngresults', formattedResults );\r\n    }\r\n})\r\n","_id":"action-3"},{"name":"TriggerJenkins","description":null,"pFunction":"var url = \"http://\" + constants.JenkinsUserName + \":\" + constants.JenkinsAPIToken + \"@\" + \r\n   constants.JenkinsURL + '/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)';\r\n\r\nrequest.get({url:url, insecure: true}, function(err, response, body) {\r\n    if(!err) {\r\n        var crumb = body.split(\":\")[1];\r\n\r\n        var joburl = \"http://\" + constants.JenkinsUserName + \":\" + constants.JenkinsAPIToken + \"@\" + \r\n                 constants.JenkinsURL + \"/job/\" + constants.JenkinsJobName + \"/build?token=\" + constants.JenkinsJobToken\r\n        var opts = {\r\n            url: joburl,\r\n            insecure: true,\r\n            contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n            headers: {\r\n                \"Jenkins-Crumb\": crumb\r\n            }\r\n        }\r\n\r\n        request.post(opts, function(err, res, bd) {\r\n            emitEvent('SlackEvent', { JenkinsCallSuccess: \"Jenkins Build just kicked off for project \" }); \r\n\r\n        })\r\n    }\r\n})","_id":"action-4"},{"name":"parsetestngresults","description":null,"pFunction":"const xml2js = require(\"xml2js\");\n\nvar payload = body;\nvar testResults = payload.logs;\nvar projectId = payload.projectId;\nvar cycleId = payload[\"test-cycle\"];\nvar testLogs = [];\nvar timestamp = new Date();\n\nvar xmlString = decodeURI(testResults);\nxmlString = xmlString.replace(/`/g, '&');\n\nxml2js.parseString(xmlString, {\n    preserveChildrenOrder: true,\n    explicitArray: false,\n    explicitChildren: false\n}, function (err, result) {\n    if (err) {\n        emitEvent('SlackEvent', { Error: \"Unexecpted Error Parsing XML Document: \" + err }); \n    } else {\n        var testsuites = Array.isArray(result['testng-results'].suite.test) ? result['testng-results'].suite.test : [result['testng-results'].suite.test];\n        testsuites.forEach(function(ts) {\n            suiteName = ts.$.name;\n            var testcases = Array.isArray(ts.class) ? ts.class : [ts.class];\n            testcases.forEach(function(obj) {\n                var className = obj.$.name;\n                var testMethods = Array.isArray(obj['test-method']) ? obj['test-method'] : [obj['test-method']];\n                testMethods.forEach(function(tm) {\n                    var methodName = tm.$.name;\n                    var methodStatus = tm.$.status;\n                    var startTime = tm.$['started-at'];\n                    var endTime = tm.$['finished-at'];\n                    var note = '';\n                    var stack = '';\n                    var paramString = '';\n                    if (methodStatus == 'FAIL') {\n                      note = tm.exception.message;\n                      stack = tm.exception['full-stacktrace'];\n                    }\n                    var exe_start_date = timestamp;\n                    var exe_end_date = timestamp;\n                    exe_end_date.setSeconds(exe_start_date.getSeconds() + (Math.floor(obj.$.time || 0)));\n                    if (tm.params !== undefined) {\n                        var parameters = Array.isArray(tm.params.param) ? tm.params.param : [tm.params.param];\n                        for (var param of parameters) {\n                            paramString = paramString + param.value;\n                        }\n                    }\n                    var testLog = {\n                      status: methodStatus,\n                      name: methodName,\n                      attachments: [],\n                      note: note,\n                      exe_start_date: exe_start_date.toISOString(),\n                      exe_end_date: exe_start_date.toISOString(),\n                      automation_content: className + \"#\" + methodName,\n                      module_names: [suiteName, className, methodName]\n                    };\n                    if (stack !== '') {\n                      testLog.attachments.push({\n                        name: `${methodName}.txt`,\n                        data: Buffer.from(stack).toString(\"base64\"),\n                        content_type: \"text/plain\"\n                      });\n                    }\n                    if (payload.consoleOutput !== undefined) {\n                        testLog.attachments.push(payload.consoleOutput[0]);\n                    }\n                    testLogs.push(testLog);\n                });\n            });\n        });\n    }\n});\n\nvar formattedResults = {\n    \"projectId\" : projectId,\n    \"test-cycle\" : cycleId,\n    \"logs\" : testLogs\n};\n\nemitEvent('SlackEvent', { ResultsFormatSuccess: \"Results formatted successfully for project\"}); \nemitEvent('UpdateQTestWithFormattedResultsEvent', formattedResults );\n","_id":"action-5"}],"rules":[{"name":"SlackMessagingRule","webhook":"event-1","actions":["action-1"],"isEnabled":true,"_id":"rule-1"},{"name":"Update qTest Manager","webhook":"event-2","actions":["action-2"],"isEnabled":true,"_id":"rule-2"},{"name":"jenkinsConsoleOutput","webhook":"event-3","actions":["action-3"],"isEnabled":true,"_id":"rule-3"},{"name":"TriggerJenkins","webhook":"event-4","actions":["action-4"],"isEnabled":true,"_id":"rule-4"},{"name":"parsetestngresults","webhook":"event-5","actions":["action-5"],"isEnabled":true,"_id":"rule-5"}],"constants":[{"name":"qTestAPIToken","value":"","_id":"constant-1"},{"name":"JenkinsURL","value":"","_id":"constant-2"},{"name":"SlackWebHook","value":"","_id":"constant-3"},{"name":"JenkinsUserName","value":"","_id":"constant-4"},{"name":"JenkinsAPIToken","value":"","_id":"constant-5"},{"name":"JenkinsJobToken","value":"","_id":"constant-6"},{"name":"JenkinsJobName","value":"","_id":"constant-7"},{"name":"ManagerURL","value":"","_id":"constant-8"}]}